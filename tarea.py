from traceback import print_tb
import cx_Oracle
import pandas as pd

connection = cx_Oracle.connect("FELIPE", "ADMIN", "localhost:1521")
cur = connection.cursor()
df = pd.read_csv("juegos.csv")

print("Cargando ................")

# Se borran las tablas si existen en la base de datos
cur.execute(
        """
            BEGIN 
                EXECUTE IMMEDIATE 'DROP TABLE Tienda'; 
            EXCEPTION 
                WHEN OTHERS THEN 
                    IF SQLCODE != -942 THEN 
                        RAISE; 
                    END IF; 
            END;
        """
)
cur.execute(
        """
            BEGIN 
                EXECUTE IMMEDIATE 'DROP TABLE Biblioteca'; 
            EXCEPTION 
                WHEN OTHERS THEN 
                    IF SQLCODE != -942 THEN 
                        RAISE; 
                    END IF; 
            END;
        """
)
cur.execute(
        """
            BEGIN 
                EXECUTE IMMEDIATE 'DROP TABLE Historial'; 
            EXCEPTION 
                WHEN OTHERS THEN 
                    IF SQLCODE != -942 THEN 
                        RAISE; 
                    END IF; 
            END;
        """
)


# Creamos la tabla de la tienda
cur.execute(
        """
            CREATE TABLE Tienda(
                rank NUMBER(11) NOT NULL,
                name_game VARCHAR(150) NOT NULL,
                platform VARCHAR(32) NOT NULL,
                year NUMBER(11) NOT NULL,
                genre VARCHAR(128) NOT NULL,
                publisher VARCHAR(128) NOT NULL,
                na_sales NUMBER(10, 2) NOT NULL,
                eu_sales NUMBER(10, 2) NOT NULL,
                jp_sales NUMBER(10, 2) NOT NULL,
                other_sales NUMBER(10, 2) NOT NULL,
                global_sales NUMBER(10, 2) NOT NULL,
                PRIMARY KEY(rank)
            )
        """
        )

# Creamos la tabla de la biblioteca
cur.execute(
        """
            CREATE TABLE Biblioteca(
                id NUMBER GENERATED BY DEFAULT AS IDENTITY,
                rank NUMBER(11) NOT NULL,
                name_game VARCHAR(150) NOT NULL,
                platform VARCHAR(32) NOT NULL,
                year NUMBER(11) NOT NULL,
                genre VARCHAR(128) NOT NULL,
                publisher VARCHAR(128) NOT NULL,
                rating NUMBER(11) NOT NULL,
                PRIMARY KEY(id)
            )
        """
        )

# Creamo la tabla del historial la cual nos guardara los cambios que haremos en la tabla de
# biblioteca, como si fuese una tabla de control.
cur.execute(
        """
            CREATE TABLE Historial(
                usuario varchar(30),
                accion varchar(100),
                fecha date
            )
        """
        )

# Creamos los trigger para el historial, tanto para cuando se ingresa, modifica o elimina un dato en
# la tabla de biblioteca
cur.execute("""
                create or replace trigger tr_juegos_insert
                after insert
                on Biblioteca
                for each row
                begin
                    insert into historial(usuario,accion,fecha) values(user,'Se ha insertado '||:new.name_game,sysdate);
                end tr_juegos_insert;
            """)
cur.execute("""
                create or replace trigger tr_juegos_delete
                before delete
                on Biblioteca
                for each row
                begin
                    insert into historial(usuario,accion,fecha) values(user,'Se ha eliminado '||:old.name_game,sysdate);
                end tr_juegos_delete;
            """)
cur.execute("""
                create or replace trigger tr_juegos_update
                after update
                on Biblioteca
                for each row
                begin
                    insert into historial(usuario,accion,fecha) values(user,'Se ha modificado '||:new.name_game,sysdate);
                end tr_juegos_update;
            """)

connection.commit()

insercion = """
            INSERT INTO Tienda(rank, name_game, platform, year, genre, publisher, na_sales, eu_sales, jp_sales, other_sales, global_sales) 
            VALUES(:rank,:name,:platform,:year,:genre,:publisher,:na_sales,:eu_sales,:jp_sales,:other_sales,:global_sales)
            """

# Arreglamos los datos nulos del CSV para luego ingresarlos en la base de datos
# Notar que cuando un numero es nulo lo ingresamos como -1
# Mientras que cuando es un string se ingresa como 'NaN'
df['Rank'] = df['Rank'].fillna(-1)
df['Name'] = df['Name'].fillna('NaN')
df['Platform'] = df['Platform'].fillna('NaN')
df['Year'] = df['Year'].fillna(-1)
df['Genre'] = df['Genre'].fillna('NaN')
df['Publisher'] = df['Publisher'].fillna('NaN')
df['NA_Sales'] = df['NA_Sales'].fillna(-1)
df['EU_Sales'] = df['EU_Sales'].fillna(-1)
df['JP_Sales'] = df['JP_Sales'].fillna(-1)
df['Other_Sales'] = df['Other_Sales'].fillna(-1)
df['Global_Sales'] = df['Global_Sales'].fillna(-1)

# Recorremos el dataframe por filas para añadir la data
print("Insertando datos...")
for i in range(len(df.index)):
    # Lo transformamos a Tuplas, para destuplarlos y castearlos a su tipo de dato correspondiente
    datos = tuple(df.iloc[i].tolist())
    rank, name_game, platform, year, genre, publisher, na_sales, eu_sales, jp_sales, other_sales, global_sales = datos
    rank = int(rank)
    name_game = str(name_game)
    platform = str(platform)
    year = int(year)
    genre = str(genre)
    publisher = str(publisher)
    na_sales = float(na_sales)
    eu_sales = float(eu_sales)
    jp_sales = float(jp_sales)
    other_sales = float(other_sales)
    global_sales = float(global_sales)
    # Insertamos en el Oracle server y hacemos el commit
    cur.execute(insercion, rank=rank, name=name_game, platform=platform, year=year, genre=genre, publisher=publisher, na_sales=na_sales, eu_sales=eu_sales, jp_sales=jp_sales, other_sales=other_sales, global_sales=global_sales)
    connection.commit()

print("Se a cargado la base de datos")
print()
print()
print("Bienvenidos a la tienda de juegos \"USM Games\"")

flag = True

while flag:
    print("===============================================================================================")
    print("1)   Mostrar Biblioteca")
    print("2)   Comprar juego")
    print("3)   Mostrar top 5 juegos segun ventas totales")
    print("4)   Mostrar top 5 juegos de un genero en especifico")
    print("5)   Eliminar juego")
    print("6)   Actualizar calificacion")
    print("7)   Mostrar juego por nombre")
    print("8)   Mostrar juegos por plataformas")
    print("9)   Eliminar todos los juegos de mi biblioteca")
    print("10)  Cerrar aplicación")
    opcion = input("Eliga una opcion: ")
    print("\n")
    
    if(opcion == "1"):
        # Seleccionamos todos los datos de la biblioteca y destuplamos los datos que nos sirven
        # para luego imprimirlo por pantalla
        cur.execute("SELECT * FROM Biblioteca")
        rows = cur.fetchall()
        for row in rows:
            _, _, name_game, platform, year, genre, publisher, rating = row
            print("    {} en la plataforma {} publicado en el año {} por {}, genero: {}. Rating: {}".format(name_game, platform, year, publisher, genre, rating))


    elif(opcion == "2"):
        # Seleccionamos los datos segun los parametros dados y nos llevamos los datos para luego 
        # ingresarlos en la tabla biblioteca
        nombre_juego = input("Ingrese el nombre del juego: ")
        platforma_juego = input("Ingrese el nombre de la platforma del juego: ")
        rating = input("Ingrese la calificacion de 1 a 5: ")
        seleccionar = "SELECT * FROM TIENDA WHERE name_game = :name_game AND platform = :platform"
        cur.execute(seleccionar, name_game=nombre_juego, platform=platforma_juego)
        row = cur.fetchone()
        insercion = """
            INSERT INTO Biblioteca(rank, name_game, platform, year, genre, publisher, rating) 
            VALUES(:rank,:name_game,:platform,:year,:genre,:publisher, :rating)
            """
        cur.execute(insercion, rank=row[0], name_game=row[1], platform=row[2], year=row[3], genre=row[4], publisher=row[5], rating=rating)
        connection.commit()

        
    elif(opcion == "3"):
        # Creamos una vista con los datos que necesitamos ordenados del mayor a la menor venta, y que sea
        # de solo 5 filas
        cur.execute("""
                    CREATE OR REPLACE VIEW top_5
                    AS
                    SELECT *
                    FROM (
                        SELECT name_game, global_sales
                            FROM tienda
                            ORDER BY global_sales DESC
                        )
                    WHERE rownum <= 5
                    """)
        connection.commit()
        cur.execute("SELECT * FROM top_5")
        print("El top de los 5 juegos es: ")
        rows = cur.fetchall()
        i = 1
        # Leemos los datos obtenidos y mostramos por consola
        for row in rows:
            name_game, global_sales = row
            print("    {}.- {} con {} ventas".format(i, name_game, global_sales))
            i += 1
        # Eliminamos el view
        cur.execute("DROP VIEW top_5")
        connection.commit()
        print("")
        
    
    elif(opcion == "4"):
        # Preguntamos por la plataforma a buscar y se hace lo mismo que en la opcion anterior
        # solo que en este caso existe la condicion extra de la plataforma
        plataforma_top = input("Ingresar la plataforma de la que se quiere obtener el top: ")
        crear_view ="""
                    CREATE OR REPLACE VIEW top_5
                    AS
                    SELECT *
                    FROM (
                        SELECT name_game, global_sales, platform
                            FROM tienda
                            ORDER BY global_sales DESC
                        )
                    WHERE platform = '{}' AND rownum <= 5
                    """
        cur.execute(crear_view.format(plataforma_top))
        connection.commit()
        cur.execute("SELECT * FROM top_5")
        rows = cur.fetchall()
        i = 1
        print("TOP 5 juegos de la plataforma {}".format(plataforma_top))
        # Leemos todo y mostramos por pantalla
        for row in rows:
            nombre_juego, global_sales, _ = row
            print("    {}.- {} con {} ventas ".format(i, nombre_juego, global_sales))
            i += 1
        # Eliminamos el View
        cur.execute("DROP VIEW top_5")
        connection.commit()
        print("")
        
    elif(opcion == "5"):
        # Con la opcion DELETE borramos el juego y mostramos por pantalla un aviso de borrado exitoso
        juego_eliminar = input("Ingresar el juego a eliminar: ")
        eliminar = "DELETE FROM Biblioteca WHERE name_game = :name_game"
        cur.execute(eliminar, name_game=juego_eliminar)
        connection.commit()
        print("El juego {} ha sido eliminado".format(juego_eliminar))

        
    elif(opcion == "6"):
        # Con la opcion UPDATE modificamos los parametros preguntado por consola
        juego_a_modificar = input("Ingresar el juego a modificar: ")
        nueva_calificacion = input("Ingresar la nueva calificacion: ")
        modificar = """
                    UPDATE Biblioteca
                    SET rating = {}
                    WHERE name_game = '{}'
                    """
        # Modificamos y hacemos el commit
        cur.execute(modificar.format(int(nueva_calificacion), juego_a_modificar))
        connection.commit()
        print("Juego modificado")

    
    elif(opcion == "7"):
        # Preguntamos el nombre del juego y en que tabla buscar
        nombre_juego = input("Ingresar el nombre del juego a buscar: ")
        tabla = input("Ingresar si se desea buscar en Tienda o en Biblioteca: ")
        print("")
        # Inicializamos el string dependiendo de la tabla seleccionada
        if tabla == "Biblioteca":
            buscar = "SELECT * FROM Biblioteca WHERE name_game = :name_game"
        else:
            buscar = "SELECT * FROM Tienda WHERE name_game = :name_game"
        cur.execute(buscar, name_game=nombre_juego)
        rows = cur.fetchall()
        # Mostrememos por pantalla la plantilla de la tabla seleccionada
        if tabla == "Biblioteca":
            for row in rows:
                _, rank, name_game, platform, year, genre, publisher, rating = row
                print("\n{} en la plataforma {} publicado en el año {} por {}, genero: {}. Rating: {}".format(name_game, platform, year, publisher, genre, rating))
        else: 
            for row in rows:
                rank, name_game, platform, year, genre, publisher, na_sales, eu_sales, jp_sales, other_sales, global_sales = row
                print("{} en la plataforma {} publicado en el año {} por {}, genero: {}.\nventas Norteamerica: {}\nventas Europa: {}\nventas Japon {}\notras ventas: {}\nventas globales: {}\n".format(name_game, platform, year, publisher, genre, na_sales, eu_sales, jp_sales, other_sales, global_sales))

        
    elif(opcion == "8"):
        # Creamos la view con los parametros de plataforma y cantidad de juegos que fueron
        # entregados por el usuario anteriormente
        nombre_plataforma = input("Ingresar el nombre del plataforma a buscar: ")
        cantidad = input("Cantidad de juegos a mostrar: ")
        crear_view ="""
                    CREATE OR REPLACE VIEW top_plataform
                    AS
                    SELECT *
                    FROM (
                        SELECT name_game, platform
                            FROM tienda
                        )
                    WHERE platform = '{}' AND rownum <= {}
                    """
        cur.execute(crear_view.format(nombre_plataforma, cantidad))
        connection.commit()
        cur.execute("SELECT * FROM top_plataform")
        rows = cur.fetchall()
        i = 1
        print("Juegos de la plataforma {}".format(nombre_plataforma))
        # Leemos todo y mostramos por pantalla
        for row in rows:
            nombre_juego, _ = row
            print("    {}.- {} ".format(i, nombre_juego))
            i += 1
        cur.execute("DROP VIEW top_plataform")
        connection.commit()
        print("")
        
    elif(opcion == "9"):
        # Consultamos si quiere borrar los datos
        print("\nSeguro que quieres realizar esta accion?")
        print("Al ejecutar se eliminara todos los datos de la Biblioteca")
        print("Esta accion es irreversible\n")
        aceptacion = input("Desea continuar? (Y/N): ")
        # Si es asi borramos todo y mandamos mensaje de exito sino mostramos mensaje de que no se ha
        # borrado nada
        if aceptacion == "Y":
            cur.execute("DELETE FROM Biblioteca")
            connection.commit()
            print("Se ha borrado la Biblioteca")
        else:
            print("La Biblioteca no se ha modificado")

    
    else:
        flag = False
    print("")

print("Desconectando la conexion")
cur.execute("DROP TRIGGER tr_juegos_insert")
cur.execute("DROP TRIGGER tr_juegos_delete")
cur.execute("DROP TRIGGER tr_juegos_update")

connection.close()
print("Bye!")

